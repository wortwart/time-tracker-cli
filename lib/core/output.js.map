{"version":3,"sources":["../../src/core/output.js"],"names":["summarize","args","table","head","chars","colAligns","style","total","search","tasks","forEach","task","index","name","duration","getSeconds","push","getStartDate","format","console","log","toString","full","table2","rate","timespan","obj","calcTime","results","pTimespan","limit","subtract","value","momentKey","checkins","el","timings","reverse","sum","overflow","i","length","stop","isBefore","diff","start","result","outputConfig","config","Object","keys","map","e","outputVertical","key","splice","cliError","err","error","red","cliSuccess","green"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table'\nimport chalk from 'chalk'\nimport {recognizeModifierTiming, humanParseDiff, calcRate} from './utils'\n\nexport const summarize = function(args) {\n\tlet table = new Table({\n\t\thead: ['Duration', 'Dates', 'Task'],\n\t\tchars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n\t\tcolAligns: ['right', 'center', 'left'],\n\t\tstyle: { head: ['green'] }\n\t});\n\tlet total = 0\n\tlet head = `Search: ${args.search} \\n`\n\n\targs.tasks.forEach((task, index) => {\n\t\tlet name = task.name\n\t\ttask = task.task\n\t\tlet duration = task.getSeconds()\n\t\ttotal += duration\n\t\ttable.push([humanParseDiff(duration), moment(task.getStartDate()).format(args.format), name])\n\t})\n\n\tconsole.log(table.toString());\n\n\tif (args.full) {\n\t\tlet table2 = new Table()\n\t\ttable2.push(\n\t\t\t{'Search': ['\\\"' + args.search + '\\\"']},\n\t\t\t{'Total time': [humanParseDiff(total)]}\n\t\t)\n\t\tif (args.rate)\n\t\t\ttable2.push({'Rate': [calcRate(args.rate, total)]})\n\t\tif (args.timespan) {\n\t\t\tlet obj = {}\n\t\t\tobj['Time (' + args.timespan + ')'] = [calcTime(args.timespan, args.tasks)]\n\t\t\ttable2.push(obj)\n\t\t}\n\t\tconsole.log(table2.toString());\n\t}\n}\n\nexport const calcTime = function(timespan, tasks) {\n\tlet results = []\n\tlet pTimespan = recognizeModifierTiming(timespan)[0]\n\tlet limit = moment().subtract(pTimespan.value, pTimespan.momentKey)\n\ttasks.forEach(el => {\n\t\tlet checkins = el.task.task.timings.reverse()\n\t\tlet sum = 0\n\t\tlet overflow = 0\n\t\tfor (let i = 0; i < checkins.length; i++) {\n\t\t\tif (moment(checkins[i].stop).isBefore(limit))\n\t\t\t\tbreak\n\t\t\tsum += moment(checkins[i].stop).diff(checkins[i].start, 's')\n\t\t\tif (moment(checkins[i].start).isBefore(limit)) {\n\t\t\t\toverflow = moment(limit).diff(checkins[i].start, 's')\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tlet result = humanParseDiff(sum, true)\n\t\tif (overflow)\n\t\t\tresult += '\\n- ' + humanParseDiff(overflow, true)\n\t\tresults.push(result)\n\t})\n\treturn results\n}\n\nexport const outputConfig = function (config) {\n\tlet table = new Table({\n\t\thead: ['Key', 'value'],\n\t\tchars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n\t\tcolAligns: ['center', 'center'],\n\t\tstyle: { head: ['green'] }\n\t});\n\tObject.keys(config).map(e => table.push([e, config[e]]))\n\tconsole.log(table.toString());\n}\n\nexport const outputVertical = function (...args) {\n\tlet table2 = new Table()\n\t\tlet key = args.splice(0, 1)\n\t\ttable2.push(\n\t\t\t{ [key]: args },\n\t\t)\n\t\treturn table2.toString()\n}\n\nexport const cliError = function(err) {\n\tconsole.error(chalk.red(`Error: ${err}`))\n}\n\nexport const cliSuccess = function(err) {\n\tconsole.log(chalk.green(err))\n}\n"]}