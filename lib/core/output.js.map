{"version":3,"sources":["../../src/core/output.js"],"names":["summarize","args","table","head","chars","colAligns","style","total","search","tasks","forEach","task","index","name","duration","getSeconds","push","getStartDate","format","console","log","toString","full","table2","rate","timespan","outputConfig","config","Object","keys","map","e","outputVertical","key","splice","cliError","err","error","red","cliSuccess","green"],"mappings":"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","file":"output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table'\nimport chalk from 'chalk'\nimport {humanParseDiff, calcRate, calcTime} from './utils'\n\nexport const summarize = function(args) {\n\tlet table = new Table({\n\t\thead: ['Duration', 'Dates', 'Task'],\n\t\tchars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n\t\tcolAligns: ['right', 'center', 'left'],\n\t\tstyle: { head: ['green'] }\n\t});\n\tlet total = 0\n\tlet head = `Search: ${args.search} \\n`\n\n\targs.tasks.forEach((task, index) => {\n\t\tlet name = task.name\n\t\ttask = task.task\n\t\tlet duration = task.getSeconds()\n\t\ttotal += duration\n\t\ttable.push([humanParseDiff(duration), moment(task.getStartDate()).format(args.format), name])\n\t})\n\n\tconsole.log(table.toString());\n\n\tif (args.full) {\n\t\tlet table2 = new Table()\n\t\ttable2.push(\n\t\t\t{'Search': ['\\\"' + args.search + '\\\"']},\n\t\t\t{'Total time': [humanParseDiff(total)]}\n\t\t)\n\t\tif (args.rate)\n\t\t\ttable2.push({'Rate': [calcRate(args.rate, total)]})\n\t\tif (args.timespan)\n\t\t\ttable2.push({'Time': [calcTime(args.timespan, args.tasks)]})\n\t\tconsole.log(table2.toString());\n\t}\n}\n\nexport const outputConfig = function (config) {\n\tlet table = new Table({\n\t\thead: ['Key', 'value'],\n\t\tchars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n\t\tcolAligns: ['center', 'center'],\n\t\tstyle: { head: ['green'] }\n\t});\n\tObject.keys(config).map(e => table.push([e, config[e]]))\n\tconsole.log(table.toString());\n}\n\nexport const outputVertical = function (...args) {\n\tlet table2 = new Table()\n\t\tlet key = args.splice(0, 1)\n\t\ttable2.push(\n\t\t\t{ [key]: args },\n\t\t)\n\t\treturn table2.toString()\n}\n\nexport const cliError = function(err) {\n\tconsole.error(chalk.red(`Error: ${err}`))\n}\n\nexport const cliSuccess = function(err) {\n\tconsole.log(chalk.green(err))\n}\n"]}